//! [Problem 12 - Project Euler](https://projecteuler.net/problem=12)
//!
//! The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle
//! number would be `1 + 2 + 3 + 4 + 5 + 6 + 7 = 28`. The first ten terms would be:
//!
//! ```text
//! 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//! ```
//!
//! Let us list the factors of the first seven triangle numbers:
//!
//! ```text
//! 1: 1
//! 3: 1,3
//! 6: 1,2,3,6
//! 10: 1,2,5,10
//! 15: 1,3,5,15
//! 21: 1,3,7,21
//! 28: 1,2,4,7,14,28
//! ```
//!
//! We can see that 28 is the first triangle number to have over five divisors.
//!
//! ```rust
//! # use project_euler::p012_highly_divisible_triangular_number::*;
//! assert_eq!(compute(5), 28);
//! ```
//!
//! What is the value of the first triangle number to have over five hundred divisors?
//!
//! ```rust
//! # use project_euler::p012_highly_divisible_triangular_number::*;
//! assert_eq!(compute(500), 76_576_500);
//! ```

pub fn compute(min_divisor_count: u32) -> u32 {
    let mut idx = 1;
    let mut tri = 1;
    while tri <= min_divisor_count {
        idx += 1;
        tri += idx;
    }
    while count_divisors_of(tri) < min_divisor_count {
        idx += 1;
        tri += idx;
    }
    tri
}

fn count_divisors_of(n: u32) -> u32 {
    if n <= 2 {
        // 0 has 0 divisors
        // 1 has 1 divisor (1)
        // 2 has 2 divisors (1, 2)
        return n;
    }
    let mut count = 2; // n has >=2 divisors (1, n)
    let max_divisor = (n as f32).sqrt().ceil() as u32;

    count += 2 * (2..max_divisor).filter(|divisor| n % *divisor == 0).count() as u32;
    count += if max_divisor * max_divisor == n { 1 } else { 0 };
    count
}
