//! [Problem 2 - Project Euler](https://projecteuler.net/problem=2)
//!
//! Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
//! starting with 1 and 2, the first 10 terms will be:
//!
//! ```text
//! 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//! ```
//!
//! ```rust
//! # use project_euler::p002_even_fibonacci_numbers::*;
//! assert_eq!(compute(100), 2 + 8 + 34);
//! ```
//!
//! By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
//! the sum of the even-valued terms.
//!
//! ```rust
//! # use project_euler::p002_even_fibonacci_numbers::*;
//! assert_eq!(compute(4_000_000), 4_613_732);
//! ```

use std::iter;

pub fn compute(max_exclusive: u32) -> u32 {
    fibonacci_numbers()
        .take_while(|x| x < &max_exclusive)
        .filter(|x| x % 2 == 0)
        .sum()
}

fn fibonacci_numbers() -> impl Iterator<Item = u32> {
    let mut n1 = 0;
    let mut n2 = 1;
    iter::from_fn(move || {
        let n3 = n1 + n2;
        n1 = n2;
        n2 = n3;
        Some(n3)
    })
}
